from collections.abc import Generator

from _typeshed import Incomplete

class Filter:
    filter_params: Incomplete
    filter_fn: Incomplete
    values: Incomplete
    queue: Incomplete
    def __init__(self, filter_params, filter_fn: Incomplete | None = None) -> None: ...
    def get_changes(self) -> Generator[Incomplete, None, None]: ...
    def get_all(self): ...
    def add(self, *values) -> None: ...
    def remove(self, *values) -> None: ...

def is_tuple(value): ...
def is_topic_string(value): ...
def is_topic(value): ...
def is_flat_topic_array(value): ...
def is_valid_with_nested_topic_array(value): ...
def is_topic_array(value): ...
def check_single_topic_match(log_topic, filter_topic): ...
def check_if_from_block_match(block_number, _type, from_block): ...
def check_if_to_block_match(block_number, _type, to_block): ...
def check_if_log_matches_flat_topics(log_topics, filter_topics): ...
def extrapolate_flat_topic_from_topic_list(value): ...
def check_if_topics_match(log_topics, filter_topics): ...
def check_if_address_match(address, addresses): ...
def check_if_log_matches(log_entry, from_block, to_block, addresses, topics): ...
