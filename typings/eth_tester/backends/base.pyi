from abc import ABCMeta, abstractmethod

from _typeshed import Incomplete

ZERO_ADDRESS: Incomplete

class BaseChainBackend(metaclass=ABCMeta):
    @abstractmethod
    def take_snapshot(self): ...
    @abstractmethod
    def revert_to_snapshot(self, snapshot): ...
    @abstractmethod
    def reset_to_genesis(self): ...
    @abstractmethod
    def time_travel(self, to_timestamp): ...
    @abstractmethod
    def mine_blocks(self, num_blocks: int = 1, coinbase=...): ...
    @abstractmethod
    def get_accounts(self): ...
    @abstractmethod
    def add_account(self, private_key): ...
    @abstractmethod
    def get_block_by_number(self, block_number, full_transaction: bool = True): ...
    @abstractmethod
    def get_block_by_hash(self, block_hash, full_transaction: bool = True): ...
    @abstractmethod
    def get_transaction_by_hash(self, transaction_hash): ...
    @abstractmethod
    def get_transaction_receipt(self, transaction_hash): ...
    @abstractmethod
    def get_nonce(self, account, block_number: Incomplete | None = None): ...
    @abstractmethod
    def get_balance(self, account, block_number: Incomplete | None = None): ...
    @abstractmethod
    def get_code(self, account, block_number: Incomplete | None = None): ...
    @abstractmethod
    def send_transaction(self, transaction): ...
    @abstractmethod
    def send_signed_transaction(self, transaction): ...
    @abstractmethod
    def estimate_gas(self, transaction, block_number: str = "latest"): ...
    @abstractmethod
    def call(self, transaction, block_number: str = "latest"): ...
