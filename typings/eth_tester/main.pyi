from collections.abc import Generator

from _typeshed import Incomplete
from eth_tester.backends import get_chain_backend as get_chain_backend
from eth_tester.constants import ZERO_ADDRESS_HEX as ZERO_ADDRESS_HEX
from eth_tester.exceptions import AccountLocked as AccountLocked
from eth_tester.exceptions import BlockNotFound as BlockNotFound
from eth_tester.exceptions import FilterNotFound as FilterNotFound
from eth_tester.exceptions import SnapshotNotFound as SnapshotNotFound
from eth_tester.exceptions import TransactionNotFound as TransactionNotFound
from eth_tester.exceptions import ValidationError as ValidationError
from eth_tester.normalization import get_normalizer_backend as get_normalizer_backend
from eth_tester.utils.accounts import private_key_to_address as private_key_to_address
from eth_tester.utils.filters import Filter as Filter
from eth_tester.utils.filters import check_if_log_matches as check_if_log_matches
from eth_tester.utils.transactions import extract_transaction_type as extract_transaction_type
from eth_tester.utils.transactions import extract_valid_transaction_params as extract_valid_transaction_params
from eth_tester.utils.transactions import remove_matching_transaction_from_list as remove_matching_transaction_from_list
from eth_tester.validation import get_validator as get_validator
from eth_typing import HexAddress as HexAddress
from eth_typing import HexStr as HexStr

def backend_proxy_method(backend_method_name): ...
def handle_auto_mining(func): ...

class EthereumTester:
    backend: Incomplete
    validator: Incomplete
    normalizer: Incomplete
    fork_blocks: Incomplete
    auto_mine_transactions: Incomplete
    def __init__(
        self,
        backend: Incomplete | None = None,
        validator: Incomplete | None = None,
        normalizer: Incomplete | None = None,
        auto_mine_transactions: bool = True,
    ) -> None: ...
    def time_travel(self, to_timestamp) -> None: ...
    def get_accounts(self): ...
    def add_account(self, private_key, password: Incomplete | None = None): ...
    def unlock_account(self, account, password, unlock_seconds: Incomplete | None = None) -> None: ...
    def lock_account(self, account) -> None: ...
    def get_balance(self, account, block_number: str = "latest"): ...
    def get_code(self, account, block_number: str = "latest"): ...
    def get_storage_at(self, account: HexAddress, slot: HexStr, block_number: str = "latest") -> int: ...
    def get_nonce(self, account, block_number: str = "latest"): ...
    def get_transaction_by_hash(self, transaction_hash): ...
    def get_block_by_number(self, block_number: str = "latest", full_transactions: bool = False): ...
    def get_block_by_hash(self, block_hash, full_transactions: bool = False): ...
    def get_transaction_receipt(self, transaction_hash): ...
    def get_fee_history(
        self, block_count: int = 1, newest_block: str = "latest", reward_percentiles: list[int] = ()
    ): ...
    def enable_auto_mine_transactions(self): ...
    def disable_auto_mine_transactions(self) -> None: ...
    def mine_blocks(self, num_blocks: int = 1, coinbase=...): ...
    def mine_block(self, coinbase=...): ...
    def send_raw_transaction(self, raw_transaction_hex): ...
    def send_transaction(self, transaction): ...
    def call(self, transaction, block_number: str = "latest"): ...
    def estimate_gas(self, transaction, block_number: str = "latest"): ...
    def take_snapshot(self): ...
    def revert_to_snapshot(self, snapshot_id) -> None: ...
    def reset_to_genesis(self) -> None: ...
    def create_block_filter(self): ...
    def create_pending_transaction_filter(self): ...
    def create_log_filter(
        self,
        from_block: Incomplete | None = None,
        to_block: Incomplete | None = None,
        address: Incomplete | None = None,
        topics: Incomplete | None = None,
    ): ...
    def delete_filter(self, filter_id) -> None: ...
    def get_only_filter_changes(self, filter_id) -> Generator[Incomplete, None, None]: ...
    def get_all_filter_logs(self, filter_id) -> Generator[Incomplete, None, None]: ...
    def get_logs(
        self,
        from_block: Incomplete | None = None,
        to_block: Incomplete | None = None,
        address: Incomplete | None = None,
        topics: Incomplete | None = None,
    ) -> Generator[Incomplete, None, None]: ...
